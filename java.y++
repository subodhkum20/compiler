%{
#include<iostream>
    using namespace std;
    int yylex (void); /* type of yylex() */
    void yyerror(char const *s);
    #define YYDEBUG 1
%}

%union { 
    char* s;
}

%token<str> PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP METHOD_REFERENCE ELLIPSIS
%token<str> AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token<str> SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN UNSIGNED_RIGHT UNSIGNED_RIGHT_ASSIGN 
%token<str> XOR_ASSIGN OR_ASSIGN
%token  <str>integerLiteral stringLiteral nullLiteral characterLiteral textBlock booleanLiteral FloatingPointLiteral Identifier ABSTRACT CONTINUE FOR NEW ASSERT DEFAULT IF PACKAGE SYNCHRONIZED BOOLEAN GOTO PRIVATE THIS BREAK DOUBLE IMPLEMENTS PROTECTED THROW BYTE ELSE IMPORT PUBLIC THROWS CASE ENUM INSTANCEOF RETURN TRANSIENT CATCH EXTENDS INT SHORT TRY CHAR FINAL INTERFACE STATIC VOID CLASS FINALLY LONG STRICTFP VOLATILE CONST FLOAT NATIVE SUPER WHILE _ EXPORTS OPENS REQUIRES USES MODULE PERMITS SEALED VAR NON_SEALED PROVIDES TO WITH OPEN RECORD TRANSITIVE YIELD

%type AdditionalBound AdditionalBounds AdditiveExpression AmbiguousName AndExpression Annotation Annotations AnnotationInterfaceBody AnnotationInterfaceDeclaration AnnotationInterfaceElementDeclaration AnnotationInterfaceElementModifier AnnotationInterfaceElementModifiers AnnotationInterfaceMemberDeclarations AnnotationInterfaceMemberDeclaration ArgumentList ArrayAccess ArrayCreationExpression ArrayCreationExpression ArrayInitializer ArrayType AssertStatement Assignment AssignmentExpression AssignmentOperator BasicForStatement BasicForStatementNoShortIf Block BlockStatement BlockStatements BreakStatement CastExpression ClassBody ClassBodyDeclaration ClassDeclaration ClassExtends ClassImplements ClassInstanceCreationExpression ClassLiteral ClassMemberDeclaration ClassModifiers ClassModifier ClassOrInterfaceType ClassOrInterfaceTypeToInstantiate ClassPermits ClassType CompactConstructorDeclaration CompilationUnit ConditionalAndExpression ConditionalExpression ConditionalOrExpression ConstantDeclaration ConstantExpression ConstantModifiers ConstantModifier ConstructorBody ConstructorDeclaration ConstructorDeclarator ConstructorModifier ConstructorModifiers ContinueStatement DefaultValue DimExpr DimExprs Dims ElementValue ElementValueArrayInitializer ElementValueList ElementValuePair ElementValuePairList EmptyStatement EnhancedForStatement EnhancedForStatementNoShortIf EnumBody EnumBodyDeclarations EnumConstant EnumConstantList EnumConstantModifier EnumConstantModifiers EnumDeclaration EqualityExpression ExceptionType ExceptionTypeList ExclusiveOrExpression ExplicitConstructorInvocation Expression ExpressionName ExpressionStatement FieldAccess FieldDeclaration FieldModifier Finally FloatingPointType ForInit FormalParameter FormalParameterList ForStatement ForStatementNoShortIf ForUpdate Identifiers Identifier IfThenElseStatement IfThenElseStatementNoShortIf IfThenStatement ImportDeclarations ImportDeclaration InclusiveOrExpression InstanceInitializer InstanceofExpression IntegralType InterfaceBody InterfaceDeclaration InterfaceExtends InterfaceMemberDeclaration InterfaceMemberDeclarations InterfaceMethodDeclaration InterfaceMethodModifier InterfaceMethodModifiers InterfaceModifier InterfaceModifier InterfacePermits InterfaceType InterfaceTypeList LabeledStatement LabeledStatementNoShortIf LambdaBody LambdaExpression LambdaParameter LambdaParameterList LambdaParameters LambdaParameterType LeftHandSide Literal LocalClassOrInterfaceDeclaration LocalVariableDeclaration LocalVariableDeclarationStatement LocalVariableType MarkerAnnotation MethodBody MethodDeclaration MethodDeclarator MethodHeader MethodInvocation MethodModifier MethodModifiers MethodName MethodReference ModularCompilationUnit ModuleDeclaration ModuleDirective ModuleDirectives ModuleName ModuleNames MultiplicativeExpression NormalAnnotation NormalClassDeclaration NormalInterfaceDeclaration NumericType OrdinaryCompilationUnit PackageDeclaration PackageModifier PackageModifier PackageName PackageOrTypeName Pattern PostDecrementExpression PostfixExpression PostIncrementExpression PreDecrementExpression PreIncrementExpression Primary PrimaryNoNewArray PrimitiveType ReceiverParameter RecordBody RecordBodyDeclaration RecordBodyDeclarations RecordComponent RecordComponentList RecordComponentModifier RecordComponentModifiers RecordDeclaration RecordHeader ReferenceType RelationalExpression RequiresModifier RequiresModifiers Result ReturnStatement ShiftExpression SimpleTypeName SingleElementAnnotation SingleStaticImportDeclaration SingleTypeImportDeclaration Statement StatementExpression StatementExpressionList StatementNoShortIf StatementWithoutTrailingSubstatement StaticImportOnDemandDeclaration StaticInitializer SynchronizedStatement Throws ThrowStatement TopLevelClassOrInterfaceDeclaration TopLevelClassOrInterfaceDeclarations Type TypeArgument TypeArguments TypeArgumentList TypeArguments TypeArgumentsOrDiamond TypeBound TypeImportOnDemandDeclaration TypeName TypeNames TypeParameter TypeParameters TypeParameterList TypeParameterModifier TypeParameterModifiers TypeParameters TypePattern TypeVariable UnannArrayType UnannClassOrInterfaceType UnannClassType UnannInterfaceType UnannPrimitiveType UnannReferenceType UnannType UnannTypeVariable UnaryExpression UnaryExpressionNotPlusMinus UnqualifiedClassInstanceCreationExpression VariableArityParameter VariableArityRecordComponent VariableDeclarator VariableDeclaratorId VariableDeclaratorList VariableInitializer VariableInitializerList VariableModifier VariableModifiers WhileStatement WhileStatementNoShortIf Wildcard WildcardBounds YieldStatement

%start CompilationUnit


%%

Literal:
integerLiteral
|FloatingPointLiteral
|booleanLiteral
|characterLiteral
|stringLiteral
|textBlock
|nullLiteral
;
Type:
PrimitiveType
|ReferenceType
;
PrimitiveType:
Annotations NumericType
|Annotations BOOLEAN
;
Annotations:

|Annotation Annotations
;
NumericType:
IntegralType
|FloatingPointType
;
IntegralType:
BYTE
|SHORT
|INT
|LONG
|CHAR
;
FloatingPointType:
FLOAT
|DOUBLE
;
ReferenceType:
ClassOrInterfaceType
|TypeVariable
|ArrayType
;
ClassOrInterfaceType:
ClassType
|InterfaceType
;
ClassType:
Annotations Identifier TypeArguments
Annotations Identifier
|PackageName '.' Annotations Identifier TypeArguments
|PackageName '.' Annotations Identifier
|ClassOrInterfaceType '.' Annotations Identifier TypeArguments
|ClassOrInterfaceType '.' Annotations Identifier
;
InterfaceType:
ClassType
;
TypeVariable:
Annotations Identifier
;
ArrayType:
PrimitiveType Dims
ClassOrInterfaceType Dims
TypeVariable Dims
Dims:

|Annotations '[' ']'
|Annotations '[' ']' Dims
;
TypeParameter:
TypeParameterModifiers Identifier TypeBound
|TypeParameterModifiers Identifier 
;
TypeParameterModifiers:

|TypeParameterModifier TypeParameterModifiers
;
TypeParameterModifier:
Annotation
;
TypeBound:
EXTENDS TypeVariable
|EXTENDS ClassOrInterfaceType AdditionalBounds
;
AdditionalBounds:

|AdditionalBound AdditionalBounds
;
AdditionalBound:
'&' InterfaceType
;
TypeArguments:
'<' TypeArgumentList '>'
;
TypeArgumentList:
TypeArgument 
|TypeArgument ',' TypeArgumentList
;
TypeArgument:
ReferenceType
|Wildcard
;
Wildcard:
Annotations '?' WildcardBounds
|Annotations '?' 
;
WildcardBounds:
EXTENDS ReferenceType
|SUPER ReferenceType
;



//Grammar for Names
ModuleName:
Identifier
|ModuleName '.' Identifier
;
PackageName:
Identifier
|PackageName '.' Identifier
;
TypeName:
Identifier
|PackageOrTypeName '.' Identifier
;
ExpressionName:
Identifier
|AmbiguousName '.' Identifier
;
MethodName:
Identifier
;
PackageOrTypeName:
Identifier
|PackageOrTypeName '.' Identifier
;
AmbiguousName:
Identifier
|AmbiguousName '.' Identifier
;



//start
CompilationUnit:
OrdinaryCompilationUnit
|ModularCompilationUnit
;
OrdinaryCompilationUnit:
PackageDeclaration ImportDeclarations TopLevelClassOrInterfaceDeclarations
|ImportDeclarations TopLevelClassOrInterfaceDeclarations
;
ImportDeclarations:

|ImportDeclaration ImportDeclarations
;
TopLevelClassOrInterfaceDeclarations:

|TopLevelClassOrInterfaceDeclaration TopLevelClassOrInterfaceDeclarations
;
ModularCompilationUnit:
ImportDeclarations ModuleDeclaration
;
ImportDeclaration:
SingleTypeImportDeclaration
|TypeImportOnDemandDeclaration
|SingleStaticImportDeclaration
|StaticImportOnDemandDeclaration
;
SingleTypeImportDeclaration:
IMPORT TypeName ';'
;
TypeImportOnDemandDeclaration:
IMPORT PackageOrTypeName '.' '*' ';'
;
SingleStaticImportDeclaration:
IMPORT STATIC TypeName '.' Identifier ';'
;
StaticImportOnDemandDeclaration:
IMPORT STATIC TypeName '.' '*' ';'
;
TopLevelClassOrInterfaceDeclaration:
ClassDeclaration
InterfaceDeclaration
';'
;
PackageDeclaration:
PackageModifiers PACKAGE Identifier Identifiers ';'
;
PackageModifiers:

|PackageModifier PackageModifiers
;
Identifiers:

|'.' Identifier Identifiers
;
PackageModifier:
Annotation
;
ModuleDeclaration:
Annotations OPEN MODULE Identifier Identifiers '{' ModuleDirectives '}'
|Annotations MODULE Identifier Identifiers '{' ModuleDirectives '}'
ModuleDirectives:

|ModuleDirective ModuleDirectives
;
ModuleDirective:
REQUIRES RequiresModifiers ModuleName ';'
|EXPORTS PackageName TO ModuleName ModuleNames ';'
|EXPORTS PackageName ';'
|OPENS PackageName TO ModuleName ModuleNames ';'
|OPENS PackageName ';'
|USES TypeName ';'
|PROVIDES TypeName WITH TypeName TypeNames ';'
;
RequiresModifiers:

|RequiresModifier RequiresModifiers
;
ModuleNames:

|',' ModuleName ModuleNames
;
TypeNames:

|',' TypeName TypeNames
;
RequiresModifier:
TRANSITIVE 
|STATIC
;



//grammar from classes
ClassDeclaration:
NormalClassDeclaration
|EnumDeclaration
|RecordDeclaration
;
NormalClassDeclaration:
ClassModifiers CLASS Identifier TypeParameters ClassExtends ClassImplements ClassPermits ClassBody
|ClassModifiers CLASS Identifier ClassExtends ClassImplements ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters  ClassImplements ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassExtends  ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassExtends ClassImplements ClassBody
|ClassModifiers CLASS Identifier ClassImplements ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassExtends ClassBody
|ClassModifiers CLASS Identifier ClassExtends ClassPermits ClassBody
|ClassModifiers CLASS Identifier ClassExtends ClassImplements ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassImplements ClassBody
|ClassModifiers CLASS Identifier ClassPermits ClassBody
|ClassModifiers CLASS Identifier TypeParameters ClassBody
|ClassModifiers CLASS Identifier ClassExtends ClassBody
|ClassModifiers CLASS Identifier ClassImplements ClassBody
|ClassModifiers CLASS Identifier ClassBody
;
ClassModifiers:

|ClassModifier ClassModifiers
;
ClassModifier:
Annotation |PUBLIC| PRIVATE|ABSTRACT| STATIC| FINAL |SEALED|NON_SEALED|STRICTFP
;
TypeParameters:
'<' TypeParameterList '>'
;
TypeParameterList:
TypeParameter 
|TypeParameter ',' TypeParameterList
;
ClassExtends:
EXTENDS ClassType
;
ClassImplements:
IMPLEMENTS InterfaceTypeList
;
InterfaceTypeList:
InterfaceType 
|InterfaceType ',' InterfaceTypeList
;
ClassPermits:
PERMITS TypeName TypeNames
;
ClassBody:
'{'ClassBodyDeclarations'}'
;
ClassBodyDeclarations:

|ClassBodyDeclaration ClassBodyDeclarations
;
ClassBodyDeclaration:
ClassMemberDeclaration
|InstanceInitializer
|StaticInitializer
|ConstructorDeclaration
;
ClassMemberDeclaration:
FieldDeclaration
|MethodDeclaration
|InterfaceDeclaration
|';'
;
FieldDeclaration:
FieldModifiers UnannType VariableDeclaratorList ';'
;
FieldModifiers:

|FieldModifier FieldModifiers
;
FieldModifier:
Annotation |PUBLIC| PRIVATE|STATIC |FINAL| TRANSIENT |VOLATILE
;
VariableDeclaratorList:
VariableDeclarator 
|VariableDeclarator ',' VariableDeclaratorList
;
VariableDeclarator:
VariableDeclaratorId
|VariableDeclaratorId '=' VariableInitializer
;
VariableDeclaratorId:
Identifier
|Identifier Dims
;
VariableInitializer:
Expression
|ArrayInitializer
;
UnannType:
UnannPrimitiveType
|UnannReferenceType
;
UnannPrimitiveType:
NumericType
|BOOLEAN
;
UnannReferenceType:
UnannClassOrInterfaceType
|UnannTypeVariable
|UnannArrayType
;
UnannClassOrInterfaceType:
UnannClassType
|UnannInterfaceType
;
UnannClassType:
Identifier
|Identifier TypeArguments
|PackageName '.' Annotations Identifier
|PackageName '.' Annotations Identifier TypeArguments
|UnannClassOrInterfaceType '.' Annotations Identifier 
|UnannClassOrInterfaceType '.' Annotations Identifier TypeArguments
;
UnannInterfaceType:
UnannClassType
;
UnannTypeVariable:
Identifier
;
UnannArrayType:
UnannPrimitiveType Dims
|UnannClassOrInterfaceType Dims
|UnannTypeVariable Dims
;
MethodDeclaration:
MethodModifiers MethodHeader MethodBody
;
MethodModifiers:

|MethodModifier MethodModifiers
;
MethodModifier:
Annotation |PUBLIC |PRIVATE|ABSTRACT| STATIC |FINAL| SYNCHRONIZED|STRICTFP
;
MethodHeader:
Result MethodDeclarator
|Result MethodDeclarator Throws
|TypeParameters Annotations Result MethodDeclarator
|TypeParameters Annotations Result MethodDeclarator Throws
;
Result:
UnannType
|VOID
;
MethodDeclarator:
Identifier '(' ReceiverParameter ',' FormalParameterList ')' Dims
|Identifier '(' ReceiverParameter ',' FormalParameterList ')' 
|Identifier '(' ReceiverParameter ','  ')' Dims
|Identifier '(' FormalParameterList ')' Dims
|Identifier '(' ')' Dims
|Identifier '(' ReceiverParameter ',' ')'
|Identifier '(' FormalParameterList ')'
|Identifier '(' ')'
;
ReceiverParameter:
Annotations UnannType THIS
Annotations UnannType Identifier '.' THIS
;
FormalParameterList:
FormalParameter 
|FormalParameter ',' FormalParameterList
;
FormalParameter:
VariableModifier UnannType VariableDeclaratorId
VariableArityParameter
;
VariableArityParameter:
VariableModifiers UnannType Annotations ELLIPSIS Identifier
;
VariableModifiers:

|VariableModifier VariableModifiers
;
VariableModifier:
Annotation
|FINAL
;
Throws:
THROWS ExceptionTypeList
;
ExceptionTypeList:
ExceptionType
|ExceptionType ',' ExceptionTypeList
;
ExceptionType:
ClassType
|TypeVariable
;
MethodBody:
Block
|';'
;
InstanceInitializer:
Block
;
StaticInitializer:
STATIC
|Block
;
ConstructorDeclaration:
ConstructorModifiers ConstructorDeclarator [Throws] ConstructorBody
;
ConstructorModifiers:

|ConstantModifier ConstructorModifiers
;
ConstructorModifier:
Annotation |PUBLIC |PRIVATE
;
ConstructorDeclarator:
TypeParameters SimpleTypeName '(' ReceiverParameter ',' FormalParameterList ')'
|SimpleTypeName '(' ReceiverParameter ',' FormalParameterList ')'
|TypeParameters SimpleTypeName '(' FormalParameterList ')'
|TypeParameters SimpleTypeName '(' ReceiverParameter ',' ')'
|SimpleTypeName '('  FormalParameterList ')'
|TypeParameters SimpleTypeName '(' ')'
| SimpleTypeName '(' ReceiverParameter ',' ')'
|SimpleTypeName '(' ')'
;
SimpleTypeName:
Identifier
;
ConstructorBody:
'{' ExplicitConstructorInvocation BlockStatements'}'
'{' ExplicitConstructorInvocation '}'
'{' BlockStatements '}'
'{' '}'
;
ExplicitConstructorInvocation:
TypeArguments THIS '(' ArgumentList ')' ';'
|TypeArguments THIS '(' ')' ';'
| THIS '(' ArgumentList ')' ';'
| THIS '(' ')' ';'
|TypeArguments SUPER '(' ArgumentList ')' ';'
|TypeArguments SUPER '(' ')' ';'
| SUPER '(' ArgumentList ')' ';'
| SUPER '(' ')' ';'
|ExpressionName '.' TypeArguments SUPER '(' ArgumentList ')' ';'
|ExpressionName '.' SUPER '(' ArgumentList ')' ';'
|ExpressionName '.' TypeArguments SUPER '(' ')' ';'
|ExpressionName '.'  SUPER '(' ')' ';'
|Primary '.' TypeArguments SUPER '(' ArgumentList ')' ';'
|Primary '.' SUPER '(' ArgumentList ')' ';'
|Primary '.' TypeArguments SUPER '(' ')' ';'
|Primary '.'  SUPER '(' ')' ';'
;
EnumDeclaration:
ClassModifiers ENUM Identifier EnumBody
|ClassModifiers ENUM Identifier ClassImplements EnumBody
;
EnumBody:
'{' EnumConstantList ',' EnumBodyDeclarations'}'
|'{' ',' EnumBodyDeclarations'}'
|'{' EnumConstantList  EnumBodyDeclarations'}'
|'{' EnumConstantList ',' '}'
|'{' EnumBodyDeclarations'}'
|'{' EnumConstantList '}'
|'{' ',' '}'
|'{' '}'
;
EnumConstantList:
EnumConstant
|EnumConstant ',' EnumConstantList
;
EnumConstant:
|EnumConstantModifiers Identifier '(' ArgumentList ')' ClassBody
|EnumConstantModifiers Identifier '(' ')' ClassBody
|EnumConstantModifiers Identifier '(' ArgumentList ')'
|EnumConstantModifiers Identifier '(' ')'
|EnumConstantModifiers Identifier 
|EnumConstantModifiers Identifier ClassBody
;
EnumConstantModifiers:

|EnumConstantModifier EnumConstantModifiers
;
EnumConstantModifier:
Annotation
;
EnumBodyDeclarations:
';' ClassBodyDeclarations
;
RecordDeclaration:
ClassModifiers RECORD Identifier TypeParameters RecordHeader ClassImplements RecordBody
|ClassModifiers RECORD Identifier RecordHeader ClassImplements RecordBody
|ClassModifiers RECORD Identifier TypeParameters RecordHeader RecordBody
|ClassModifiers RECORD Identifier RecordHeader RecordBody
;
RecordHeader:
'(' RecordComponentList ')'
|'(' ')'
;
RecordComponentList:
RecordComponent
|RecordComponent ',' RecordComponentList
;
RecordComponent:
RecordComponentModifiers UnannType Identifier
|VariableArityRecordComponent
;
VariableArityRecordComponent:
RecordComponentModifiers UnannType Annotations ELLIPSIS Identifier
;
RecordComponentModifiers:

|RecordComponentModifier RecordComponentModifiers
;
RecordComponentModifier:
Annotation
;
RecordBody:
'{' RecordBodyDeclarations '}'
;
RecordBodyDeclarations:

|RecordBodyDeclaration RecordBodyDeclarations
;
RecordBodyDeclaration:
ClassBodyDeclaration
|CompactConstructorDeclaration
;
CompactConstructorDeclaration:
ConstructorModifiers SimpleTypeName ConstructorBody
;



// grammar for Interfaces
InterfaceDeclaration:
NormalInterfaceDeclaration
|AnnotationInterfaceDeclaration
;
NormalInterfaceDeclaration:
InterfaceModifiers INTERFACE Identifier TypeParameters InterfaceExtends InterfacePermits
InterfaceBody
|InterfaceModifiers INTERFACE Identifier InterfaceExtends InterfacePermits InterfaceBody
|InterfaceModifiers INTERFACE Identifier TypeParameters InterfacePermits InterfaceBody
|InterfaceModifiers INTERFACE Identifier TypeParameters InterfaceExtends InterfaceBody
|InterfaceModifiers INTERFACE Identifier InterfaceExtends InterfaceBody
|InterfaceModifiers INTERFACE Identifier InterfacePermits InterfaceBody
|InterfaceModifiers INTERFACE Identifier TypeParameters InterfaceBody
|InterfaceModifiers INTERFACE Identifier InterfaceBody
;
InterfaceModifiers:

|InterfaceModifier InterfaceModifiers
;
InterfaceModifier:
Annotation |PUBLIC |PRIVATE|ABSTRACT |STATIC |SEALED|NON_SEALED|STRICTFP
;
InterfaceExtends:
EXTENDS InterfaceTypeList
;
InterfacePermits:
PERMITS TypeName TypeNames
;
TypeNames:

|',' TypeName TypeNames
InterfaceBody:
'{'InterfaceMemberDeclarations'}'
;
InterfaceMemberDeclarations:

|InterfaceMemberDeclaration InterfaceMemberDeclarations
;
InterfaceMemberDeclaration:
ConstantDeclaration
|InterfaceMethodDeclaration
|ClassDeclaration
|InterfaceDeclaration
|';'
;
ConstantDeclaration:
ConstantModifiers UnannType VariableDeclaratorList ';'
;
ConstantModifiers:

|ConstantModifier ConstantModifiers
;
ConstantModifier:
Annotation|PUBLIC|STATIC|FINAL
;
InterfaceMethodDeclaration:
|InterfaceMethodModifiers MethodHeader MethodBody
;
InterfaceMethodModifiers:

|InterfaceMethodModifier InterfaceMethodModifiers
;
InterfaceMethodModifier:
STRICTFP|Annotation|PUBLIC|PRIVATE|ABSTRACT|STATIC
;
AnnotationInterfaceDeclaration:
InterfaceModifiers '@' INTERFACE Identifier AnnotationInterfaceBody
;
AnnotationInterfaceBody:
'{' AnnotationInterfaceMemberDeclarations '}'
;
AnnotationInterfaceMemberDeclarations:

|AnnotationInterfaceMemberDeclaration AnnotationInterfaceMemberDeclarations
;
AnnotationInterfaceMemberDeclaration:
AnnotationInterfaceElementDeclaration
|ConstantDeclaration
|ClassDeclaration
|InterfaceDeclaration
|';'
;
AnnotationInterfaceElementDeclaration:
AnnotationInterfaceElementModifiers UnannType Identifier '(' ')' Dims DefaultValue ';'
|AnnotationInterfaceElementModifiers UnannType Identifier '(' ')' DefaultValue ';'
|AnnotationInterfaceElementModifiers UnannType Identifier '(' ')' Dims ';'
|AnnotationInterfaceElementModifiers UnannType Identifier '(' ')' ';'
;
AnnotationInterfaceElementModifiers:

|AnnotationInterfaceElementModifier AnnotationInterfaceElementModifiers
;
AnnotationInterfaceElementModifier:
Annotation|PUBLIC|ABSTRACT
;
DefaultValue:
DEFAULT ElementValue
;
Annotation:
NormalAnnotation
|MarkerAnnotation
|SingleElementAnnotation
;
NormalAnnotation:
'@' TypeName '(' ElementValuePairList ')'
|'@' TypeName '(' ')'
;
ElementValuePairList:
ElementValuePair
|ElementValuePair ',' ElementValuePairList
;
ElementValuePair:
Identifier '=' ElementValue
;
ElementValue:
ConditionalExpression
|ElementValueArrayInitializer
|Annotation
;
ElementValueArrayInitializer:
'{'ElementValueList ',' '}'
|'{' ',' '}'
|'{'ElementValueList '}'
|'{' '}'
;
ElementValueList:
ElementValue 
|ElementValue ',' ElementValueList
;
MarkerAnnotation:
'@' TypeName
;
SingleElementAnnotation:
'@' TypeName '(' ElementValue ')'
;



//Arrays
ArrayInitializer:
'{' VariableInitializerList ',' '}'
|'{' VariableInitializerList '}'
|'{' ',' '}'
|'{' '}'
;
VariableInitializerList:
VariableInitializer 
|VariableInitializer ',' VariableInitializerList
;


//productions from (blocks, statements and patterns)
Block:

|'{' BlockStatements Block '}'
;
BlockStatements:
BlockStatement BlockStatements
;
BlockStatement:
LocalClassOrInterfaceDeclaration
|LocalVariableDeclarationStatement
|Statement
;
LocalClassOrInterfaceDeclaration:
ClassDeclaration
|NormalInterfaceDeclaration
;
LocalVariableDeclarationStatement:
LocalVariableDeclaration ';'
;
LocalVariableDeclaration:
VariableModifiers LocalVariableType VariableDeclaratorList
;
LocalVariableType:
UnannType
|VAR
;
Statement:
StatementWithoutTrailingSubstatement
|LabeledStatement
|IfThenStatement
|IfThenElseStatement
|WhileStatement
|ForStatement
;
StatementNoShortIf:
StatementWithoutTrailingSubstatement
|LabeledStatementNoShortIf
|IfThenElseStatementNoShortIf
|WhileStatementNoShortIf
|ForStatementNoShortIf
;
StatementWithoutTrailingSubstatement:
Block
|EmptyStatement
|ExpressionStatement
|AssertStatement
|BreakStatement
|ContinueStatement
|ReturnStatement
|SynchronizedStatement
|ThrowStatement
|YieldStatement
;
EmptyStatement:
';'
;
LabeledStatement:
Identifier ':' Statement
;
LabeledStatementNoShortIf:
Identifier ':' StatementNoShortIf
;
ExpressionStatement:
StatementExpression ';'
;
StatementExpression:
Assignment
|PreIncrementExpression
|PreDecrementExpression
|PostIncrementExpression
|PostDecrementExpression
|MethodInvocation
|ClassInstanceCreationExpression
;
IfThenStatement:
IF '(' Expression ')' Statement
;
IfThenElseStatement:
IF '(' Expression ')' StatementNoShortIf ELSE Statement
;
IfThenElseStatementNoShortIf:
IF '(' Expression ')' StatementNoShortIf ELSE StatementNoShortIf
;
AssertStatement:
ASSERT Expression ';'
|ASSERT Expression ':' Expression ';'
;
WhileStatement:
WHILE '(' Expression ')' Statement
;
WhileStatementNoShortIf:
WHILE '(' Expression ')' StatementNoShortIf
;
ForStatement:
BasicForStatement
|EnhancedForStatement
;
ForStatementNoShortIf:
BasicForStatementNoShortIf
|EnhancedForStatementNoShortIf
;
BasicForStatement:
FOR '(' ForInit ';' Expression ';' ForUpdate ')' Statement
|FOR '(' ';' Expression ';' ForUpdate ')' Statement
|FOR '(' ForInit ';' ';' ForUpdate ')' Statement
|FOR '(' ForInit ';' Expression ';' ')' Statement
|FOR '(' ';' ';' ForUpdate ')' Statement
|FOR '(' ';' Expression ';' ')' Statement
|FOR '(' ForInit ';' ';' ')' Statement
|FOR '(' ';' ';' ')' Statement
;
BasicForStatementNoShortIf:
FOR '(' ForInit ';' Expression ';' ForUpdate ')' StatementNoShortIf
|FOR '(' ';' Expression ';' ForUpdate ')' StatementNoShortIf
|FOR '(' ForInit ';' ';' ForUpdate ')' StatementNoShortIf
|FOR '(' ForInit ';' Expression ';' ')' StatementNoShortIf
|FOR '(' ';' ';' ForUpdate ')' StatementNoShortIf
|FOR '(' ';' Expression ';' ')' StatementNoShortIf
|FOR '(' ForInit ';' ';' ')' StatementNoShortIf
|FOR '(' ';' ';' ')' StatementNoShortIf
;
ForInit:
StatementExpressionList
|LocalVariableDeclaration
;
ForUpdate:
StatementExpressionList
;
StatementExpressionList:
StatementExpression
StatementExpression ',' StatementExpressionList
;
EnhancedForStatement:
FOR '(' LocalVariableDeclaration : Expression ')' Statement
;
EnhancedForStatementNoShortIf:
FOR '(' LocalVariableDeclaration : Expression ')' StatementNoShortIf
;
BreakStatement:
BREAK Identifier ";"
|BREAK ";"
;
YieldStatement:
YIELD Expression ';'
;
ContinueStatement:
CONTINUE ';'
CONTINUE Identifier ';'
;
ReturnStatement:
RETURN ';'
RETURN Expression ';'
;
ThrowStatement:
THROW Expression ';'
;
SynchronizedStatement:
SYNCHRONIZED '(' Expression ')' Block
;
Finally:
FINALLY Block
;
Pattern:
TypePattern
;
TypePattern:
LocalVariableDeclaration
;



//Grammar for Expressions
Primary:
PrimaryNoNewArray
|ArrayCreationExpression
;
PrimaryNoNewArray:
Literal
|ClassLiteral
|THIS
|TypeName '.' THIS
|'(' Expression ')'
|ClassInstanceCreationExpression
|FieldAccess
|ArrayAccess
|MethodInvocation
|MethodReference
;
ClassLiteral:
TypeName Brackets '.' CLASS
|NumericType Brackets '.' CLASS
|BOOLEAN Brackets '.' CLASS
|VOID '.' CLASS
;
Brackets:

|'[' ']' Brackets
;
ClassInstanceCreationExpression:
UnqualifiedClassInstanceCreationExpression
|ExpressionName '.' UnqualifiedClassInstanceCreationExpression
|Primary '.' UnqualifiedClassInstanceCreationExpression
;
UnqualifiedClassInstanceCreationExpression:
NEW TypeArguments ClassOrInterfaceTypeToInstantiate '(' ArgumentList ')' ClassBody
NEW ClassOrInterfaceTypeToInstantiate '(' ArgumentList ')' ClassBody
NEW TypeArguments ClassOrInterfaceTypeToInstantiate '(' ArgumentList ')' 
NEW TypeArguments ClassOrInterfaceTypeToInstantiate '(' ')' ClassBody
NEW TypeArguments ClassOrInterfaceTypeToInstantiate '(' ')'
NEW ClassOrInterfaceTypeToInstantiate '(' ArgumentList ')'
NEW ClassOrInterfaceTypeToInstantiate '(' ')' ClassBody
|NEW ClassOrInterfaceTypeToInstantiate '(' ')'
;
ClassOrInterfaceTypeToInstantiate:
ClassOrInterfaceTypeToInstant TypeArgumentsOrDiamond
|ClassOrInterfaceTypeToInstant 
;
ClassOrInterfaceTypeToInstant:
Annotations Identifier
|Annotations Identifier '.' ClassOrInterfaceTypeToInstantiate
;
TypeArgumentsOrDiamond:
TypeArguments
|'<''>'
;
FieldAccess:
Primary '.' Identifier
|SUPER '.' Identifier
|TypeName '.' SUPER '.' Identifier
;
ArrayAccess:
ExpressionName '[' Expression ']'
|PrimaryNoNewArray '[' Expression ']'
;
MethodInvocation:
MethodName '(' ArgumentList ')'
|MethodName '(' ')'
|TypeName '.' TypeArguments Identifier '(' ArgumentList ')'
|TypeName '.' TypeArguments Identifier '(' ')'
|TypeName '.' Identifier '(' ArgumentList ')'
|TypeName '.' Identifier '(' ')'
|ExpressionName '.' TypeArguments Identifier '(' ArgumentList ')'
|ExpressionName '.' TypeArguments Identifier '(' ')'
|ExpressionName '.' Identifier '(' ArgumentList ')'
|ExpressionName '.' Identifier '(' ')'
|Primary '.' TypeArguments Identifier '(' ArgumentList ')'
|Primary '.' Identifier '(' ArgumentList ')'
|Primary '.' TypeArguments Identifier '(' ')'
|Primary '.' Identifier '(' ')'
|SUPER '.' TypeArguments Identifier '(' ArgumentList ')'
|SUPER '.' TypeArguments Identifier '(' ')'
|SUPER '.' Identifier '(' ArgumentList ')'
|SUPER '.' Identifier '(' ')'
|TypeName '.' SUPER '.' TypeArguments Identifier '(' ArgumentList ')'
|TypeName '.' SUPER '.' Identifier '(' ArgumentList ')'
|TypeName '.' SUPER '.' TypeArguments Identifier '(' ')'
|TypeName '.' SUPER '.' Identifier '(' ')'
;
ArgumentList:
Expression
|Expression ArgumentList
;
MethodReference:
ExpressionName METHOD_REFERENCE TypeArguments Identifier
|ExpressionName METHOD_REFERENCE Identifier
|Primary METHOD_REFERENCE TypeArguments Identifier
|Primary METHOD_REFERENCE Identifier
|ReferenceType METHOD_REFERENCE TypeArguments Identifier
|ReferenceType METHOD_REFERENCE Identifier
|SUPER METHOD_REFERENCE TypeArguments Identifier
|SUPER METHOD_REFERENCE Identifier
|TypeName '.' SUPER METHOD_REFERENCE TypeArguments Identifier
|TypeName '.' SUPER METHOD_REFERENCE Identifier
|ClassType METHOD_REFERENCE TypeArguments NEW
|ClassType METHOD_REFERENCE NEW
|ArrayType METHOD_REFERENCE NEW
;
ArrayCreationExpression:
NEW PrimitiveType DimExprs Dims
|NEW PrimitiveType DimExprs
|NEW ClassOrInterfaceType DimExprs
|NEW ClassOrInterfaceType DimExprs Dims
|NEW PrimitiveType Dims ArrayInitializer
|NEW ClassOrInterfaceType Dims ArrayInitializer
;
DimExprs:
DimExpr
|DimExpr DimExprs
;
DimExpr:
Annotations '[' Expression ']'
;
Expression:
LambdaExpression
|AssignmentExpression
;
LambdaExpression:
LambdaParameters PTR_OP LambdaBody
;
LambdaParameters:
'(' ')'
'(' LambdaParameterList ')'
|Identifier
;
LambdaParameterList:
LambdaParameter
|LambdaParameter ',' LambdaParameterList
|Identifier Identifiers
;
Identifiers:

|',' Identifier Identifiers
LambdaParameter:
VariableModifiers LambdaParameterType VariableDeclaratorId
VariableArityParameter
;
LambdaParameterType:
UnannType
|VAR
;
LambdaBody:
Expression
|Block
;
AssignmentExpression:
ConditionalExpression
|Assignment
;
Assignment:
LeftHandSide AssignmentOperator Expression
;
LeftHandSide:
ExpressionName
|FieldAccess
|ArrayAccess
;
AssignmentOperator:
'='|MUL_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|UNSIGNED_RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
;
ConditionalExpression:
ConditionalOrExpression
|ConditionalOrExpression '?' Expression ':' ConditionalExpression
|ConditionalOrExpression '?' Expression ':' LambdaExpression
;
ConditionalOrExpression:
ConditionalAndExpression
|ConditionalOrExpression OR_OP ConditionalAndExpression
;
ConditionalAndExpression:
InclusiveOrExpression
|ConditionalAndExpression AND_OP InclusiveOrExpression
;
InclusiveOrExpression:
ExclusiveOrExpression
|InclusiveOrExpression '|' ExclusiveOrExpression
;
ExclusiveOrExpression:
AndExpression
|ExclusiveOrExpression '^' AndExpression
;
AndExpression:
EqualityExpression
|AndExpression '&' EqualityExpression
;
EqualityExpression:
RelationalExpression
|EqualityExpression EQ_OP RelationalExpression
|EqualityExpression NE_OP RelationalExpression
;
RelationalExpression:
ShiftExpression
|RelationalExpression '<' ShiftExpression
|RelationalExpression '>' ShiftExpression
|RelationalExpression LE_OP ShiftExpression
|RelationalExpression GE_OP ShiftExpression
|InstanceofExpression
;
InstanceofExpression:
RelationalExpression INSTANCEOF ReferenceType
|RelationalExpression INSTANCEOF Pattern
;
ShiftExpression:
AdditiveExpression
|ShiftExpression LEFT_OP AdditiveExpression
|ShiftExpression RIGHT_OP AdditiveExpression
|ShiftExpression UNSIGNED_RIGHT AdditiveExpression
;
AdditiveExpression:
MultiplicativeExpression
|AdditiveExpression '+' MultiplicativeExpression
|AdditiveExpression '-' MultiplicativeExpression
;
MultiplicativeExpression:
UnaryExpression
|MultiplicativeExpression '*' UnaryExpression
|MultiplicativeExpression '/' UnaryExpression
|MultiplicativeExpression '%' UnaryExpression
;
UnaryExpression:
PreIncrementExpression
|PreDecrementExpression
|'+' UnaryExpression
|'-' UnaryExpression
|UnaryExpressionNotPlusMinus
;
PreIncrementExpression:
INC_OP UnaryExpression
;
PreDecrementExpression:
DEC_OP UnaryExpression
;
UnaryExpressionNotPlusMinus:
PostfixExpression
|'~' UnaryExpression
|'!' UnaryExpression
|CastExpression
;
PostfixExpression:
Primary
|ExpressionName
|PostIncrementExpression
|PostDecrementExpression
;
PostIncrementExpression:
PostfixExpression INC_OP
;
PostDecrementExpression:
PostfixExpression DEC_OP
;
CastExpression:
'(' PrimitiveType ")" UnaryExpression
|'(' ReferenceType AdditionalBounds ')' UnaryExpressionNotPlusMinus
|'(' ReferenceType AdditionalBounds ')' LambdaExpression
;
ConstantExpression:
Expression
;
%%

int main(){
    yyparse();
    return 0;
}


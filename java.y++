%{
#include<iostream>
    using namespace std;
    int yylex (void); /* type of yylex() */
    void yyerror(char const *s);
    #define YYDEBUG 1
%}

%union { 
    char* s;
}

%token  <str>operators separators integerLiteral stringLiteral boolean float nullLiteral characterLiteral textBlock Identifier ABSTRACT CONTINUE FOR NEW SWITCH ASSERT DEFAULT IF PACKAGE SYNCHRONIZED BOOLEAN DO GOTO PRIVATE THIS BREAK DOUBLE IMPLEMENTS PROTECTED THROW BYTE ELSE IMPORT PUBLIC THROWS CASE ENUM INSTANCEOF RETURN TRANSIENT CATCH EXTENDS INT SHORT TRY CHAR FINAL INTERFACE STATIC VOID CLASS FINALLY LONG STRICTFP VOLATILE CONST FLOAT NATIVE SUPER WHILE _ EXPORTS OPENS REQUIRES USES MODULE PERMITS SEALED VAR NON_SEALED PROVIDES TO WITH OPEN RECORD TRANSITIVE YIELD

%type AdditionalBound AdditiveExpression AmbiguousName AndExpression Annotation AnnotationInterfaceBody AnnotationInterfaceDeclaration AnnotationInterfaceElementDeclaration AnnotationInterfaceElementModifier AnnotationInterfaceMemberDeclaration ArgumentList ArrayAccess ArrayCreationExpression ArrayCreationExpression ArrayInitializer ArrayType AssertStatement Assignment AssignmentExpression AssignmentOperator BasicForStatement BasicForStatementNoShortIf Block BlockStatement BlockStatements BreakStatement CaseConstant CastExpression CatchClause Catches CatchFormalParameter CatchType ClassBody ClassBodyDeclaration ClassDeclaration ClassExtends ClassImplements ClassInstanceCreationExpression ClassLiteral ClassMemberDeclaration ClassModifier ClassOrInterfaceType ClassOrInterfaceTypeToInstantiate ClassPermits ClassType CompactConstructorDeclaration CompilationUnit ConditionalAndExpression ConditionalExpression ConditionalOrExpression ConstantDeclaration ConstantExpression ConstantModifier ConstructorBody ConstructorDeclaration ConstructorDeclarator ConstructorModifier ContinueStatement DefaultValue DimExpr DimExprs Dims DoStatement ElementValue ElementValueArrayInitializer ElementValueList ElementValuePair ElementValuePairList EmptyStatement EnhancedForStatement EnhancedForStatementNoShortIf EnumBody EnumBodyDeclarations EnumConstant EnumConstantList EnumConstantModifier EnumDeclaration EqualityExpression ExceptionType ExceptionTypeList ExclusiveOrExpression ExplicitConstructorInvocation Expression ExpressionName ExpressionStatement FieldAccess FieldDeclaration FieldModifier Finally FloatingPointType ForInit FormalParameter FormalParameterList ForStatement ForStatementNoShortIf ForUpdate Identifier IfThenElseStatement IfThenElseStatementNoShortIf IfThenStatement ImportDeclaration InclusiveOrExpression InstanceInitializer InstanceofExpression IntegralType InterfaceBody InterfaceDeclaration InterfaceExtends InterfaceMemberDeclaration InterfaceMethodDeclaration InterfaceMethodModifier InterfaceModifier InterfacePermits InterfaceType InterfaceTypeList LabeledStatement LabeledStatementNoShortIf LambdaBody LambdaExpression LambdaParameter LambdaParameterList LambdaParameters LambdaParameterType LeftHandSide Literal LocalClassOrInterfaceDeclaration LocalVariableDeclaration LocalVariableDeclarationStatement LocalVariableType MarkerAnnotation MethodBody MethodDeclaration MethodDeclarator MethodHeader MethodInvocation MethodModifier MethodName MethodReference ModularCompilationUnit ModuleDeclaration ModuleDirective ModuleName MultiplicativeExpression NormalAnnotation NormalClassDeclaration NormalInterfaceDeclaration NumericType OrdinaryCompilationUnit PackageDeclaration PackageModifier PackageName PackageOrTypeName Pattern PostDecrementExpression PostfixExpression PostIncrementExpression PreDecrementExpression PreIncrementExpression Primary PrimaryNoNewArray PrimitiveType ReceiverParameter RecordBody RecordBodyDeclaration RecordBodyDeclaration RecordComponent RecordComponentList RecordComponentModifier RecordDeclaration RecordHeader ReferenceType RelationalExpression RequiresModifier Resource ResourceList ResourceSpecification Result ReturnStatement ShiftExpression SimpleTypeName SingleElementAnnotation SingleStaticImportDeclaration SingleTypeImportDeclaration Statement StatementExpression StatementExpressionList StatementNoShortIf StatementWithoutTrailingSubstatement StaticImportOnDemandDeclaration StaticInitializer SwitchBlock SwitchBlockStatementGroup SwitchExpression SwitchLabel SwitchRule SwitchStatement SynchronizedStatement Throws ThrowStatement TopLevelClassOrInterfaceDeclaration TryStatement TryWithResourcesStatement Type TypeArgument TypeArgumentList TypeArguments TypeArgumentsOrDiamond TypeBound TypeIdentifier TypeImportOnDemandDeclaration TypeName TypeParameter TypeParameterList TypeParameterModifier TypeParameters TypePattern TypeVariable UnannArrayType UnannClassOrInterfaceType UnannClassType UnannInterfaceType UnannPrimitiveType UnannReferenceType UnannType UnannTypeVariable UnaryExpression UnaryExpressionNotPlusMinus UnqualifiedClassInstanceCreationExpression UnqualifiedMethodIdentifier VariableAccess VariableArityParameter VariableArityRecordComponent VariableDeclarator VariableDeclaratorId VariableDeclaratorList VariableInitializer VariableInitializerList VariableModifier WhileStatement WhileStatementNoShortIf Wildcard WildcardBounds YieldStatement
%%


Literal:
IntegerLiteral
|FloatingPointLiteral
|BooleanLiteral
|CharacterLiteral
|StringLiteral
|TextBlock
|NullLiteral
;
Type:
PrimitiveType
|ReferenceType
;
PrimitiveType:
NumericType
|Annotation NumericType
|boolean
|Annotation boolean
NumericType:
IntegralType
FloatingPointType
IntegralType:
"byte" |"short" |"int" |"long" |"char"
FloatingPointType:
"float" |"double"
ReferenceType:
ClassOrInterfaceType
TypeVariable
ArrayType
ClassOrInterfaceType:
ClassType
InterfaceType
ClassType:
TypeIdentifier [TypeArguments]
|Annotation TypeIdentifier [TypeArguments]
|TypeIdentifier [TypeArguments]
|PackageName . TypeIdentifier [TypeArguments]
|PackageName . Annotation TypeIdentifier [TypeArguments]
|ClassOrInterfaceType . TypeIdentifier [TypeArguments]
|ClassOrInterfaceType . Annotation TypeIdentifier [TypeArguments]
InterfaceType:
ClassType
TypeVariable:
TypeIdentifier
|Annotation TypeIdentifier
ArrayType:
PrimitiveType Dims
ClassOrInterfaceType Dims
TypeVariable Dims
Dims:
[ ] {{Annotation} [ ]}
|Annotation [ ] {{Annotation} [ ]}
TypeParameter:
TypeIdentifier [TypeBound]
|TypeParameterModifier TypeIdentifier [TypeBound]
TypeParameterModifier:
Annotation
TypeBound:
extends TypeVariable
extends ClassOrInterfaceType 
extends ClassOrInterfaceType AdditionalBound
AdditionalBound:
& InterfaceType
TypeArguments:
< TypeArgumentList >
TypeArgumentList:
TypeArgument 
TypeArgument , TypeArgument
TypeArgument:
ReferenceType
Wildcard
Wildcard:
? [WildcardBounds]
Annotation ? [WildcardBounds]
WildcardBounds:
extends ReferenceType
super ReferenceType
ModuleName:
Identifier
ModuleName . Identifier
PackageName:
Identifier
PackageName . Identifier
TypeName:
TypeIdentifier
PackageOrTypeName . TypeIdentifier
ExpressionName:
Identifier
AmbiguousName . Identifier
MethodName:
UnqualifiedMethodIdentifier
PackageOrTypeName:
Identifier
PackageOrTypeName . Identifier
AmbiguousName:
Identifier
AmbiguousName . Identifier
CompilationUnit:
OrdinaryCompilationUnit
ModularCompilationUnit
OrdinaryCompilationUnit:
[PackageDeclaration]
[PackageDeclaration] TopLevelClassOrInterfaceDeclaration
[PackageDeclaration] ImportDeclaration
[PackageDeclaration] ImportDeclaration TopLevelClassOrInterfaceDeclaration
ModularCompilationUnit:
ModuleDeclaration
ImportDeclaration ModuleDeclaration
PackageDeclaration:
package Identifier ;
PackageModifier package Identifier ;
package Identifier . Identifier ;
PackageModifier package Identifier . Identifier ;
PackageModifier:
Annotation
ImportDeclaration:
SingleTypeImportDeclaration
TypeImportOnDemandDeclaration
SingleStaticImportDeclaration
StaticImportOnDemandDeclaration
SingleTypeImportDeclaration:
import TypeName ;
TypeImportOnDemandDeclaration:
import PackageOrTypeName . * ;
SingleStaticImportDeclaration:
"import" "static" TypeName . Identifier ;
StaticImportOnDemandDeclaration:
"import" "static" TypeName . * ;
TopLevelClassOrInterfaceDeclaration:
ClassDeclaration
InterfaceDeclaration
;
ModuleDeclaration:
{Annotation} [open] module Identifier {. Identifier} { {ModuleDirective} }
ModuleDirective:
"requires" ModuleName ;
"requires" RequiresModifier ModuleName ;
exports PackageName [to ModuleName {, ModuleName}] ;
opens PackageName [to ModuleName {, ModuleName}] ;
uses TypeName ;
provides TypeName with TypeName {, TypeName} ;
RequiresModifier:
"transitive" |"static"
ClassDeclaration:
NormalClassDeclaration
EnumDeclaration
RecordDeclaration
NormalClassDeclaration:
class TypeIdentifier [TypeParameters] [ClassExtends] [ClassImplements] [ClassPermits] ClassBody
ClassModifier class TypeIdentifier [TypeParameters] [ClassExtends] [ClassImplements] [ClassPermits] ClassBody
ClassModifier:
Annotation |"public"| "protected"| "private"|"abstract"| "static"| "final" |"sealed"|"non-sealed" |"strictfp"
TypeParameters:
< TypeParameterList >
TypeParameterList:
TypeParameter 
TypeParameter , TypeParameter
ClassExtends:
extends ClassType
ClassImplements:
implements InterfaceTypeList
InterfaceTypeList:
InterfaceType 
InterfaceType , InterfaceType
ClassPermits:
permits TypeName 
permits TypeName , TypeName
ClassBody:

|"{"ClassBodyDeclaration"}"
ClassBodyDeclaration:
ClassMemberDeclaration
InstanceInitializer
StaticInitializer
ConstructorDeclaration
ClassMemberDeclaration:
FieldDeclaration
MethodDeclaration
ClassDeclaration
InterfaceDeclaration
;
FieldDeclaration:
UnannType VariableDeclaratorList ;
FieldModifier UnannType VariableDeclaratorList ;
FieldModifier:
Annotation |"public"| "protected"| "private"|"static" |"final"| "transient" |"volatile"
VariableDeclaratorList:
VariableDeclarator 
VariableDeclarator , VariableDeclarator
VariableDeclarator:
VariableDeclaratorId [= VariableInitializer]
VariableDeclaratorId:
Identifier [Dims]
VariableInitializer:
Expression
ArrayInitializer
UnannType:
UnannPrimitiveType
UnannReferenceType
UnannPrimitiveType:
NumericType
boolean
UnannReferenceType:
UnannClassOrInterfaceType
UnannTypeVariable
UnannArrayType
UnannClassOrInterfaceType:
UnannClassType
UnannInterfaceType
UnannClassType:
TypeIdentifier [TypeArguments]
PackageName . TypeIdentifier [TypeArguments]
PackageName . Annotation TypeIdentifier [TypeArguments]
UnannClassOrInterfaceType . TypeIdentifier [TypeArguments]
UnannClassOrInterfaceType . Annotation TypeIdentifier [TypeArguments]
UnannInterfaceType:
UnannClassType
UnannTypeVariable:
TypeIdentifier
UnannArrayType:
UnannPrimitiveType Dims
UnannClassOrInterfaceType Dims
UnannTypeVariable Dims
MethodDeclaration:
MethodHeader MethodBody
MethodModifier MethodHeader MethodBody
MethodModifier:
Annotation |"public"| "protected" |"private"|"abstract"| "static" |"final"| "synchronized"| "native" |"strictfp"
MethodHeader:
Result MethodDeclarator [Throws]
TypeParameters Result MethodDeclarator [Throws]
TypeParameters Annotation Result MethodDeclarator [Throws]
Result:
UnannType
"void"
MethodDeclarator:
Identifier "(" [ReceiverParameter ,] [FormalParameterList] ")" [Dims]
ReceiverParameter:
UnannType [Identifier .] this
Annotation UnannType [Identifier .] this
FormalParameterList:
FormalParameter 
FormalParameter , FormalParameter
FormalParameter:
UnannType VariableDeclaratorId
VariableModifier UnannType VariableDeclaratorId
VariableArityParameter
VariableArityParameter:
UnannType ... Identifier
UnannType Annotation ... Identifier
VariableModifier UnannType ... Identifier
VariableModifier UnannType Annotation ... Identifier
VariableModifier:
Annotation
final
Throws:
throws ExceptionTypeList
ExceptionTypeList:
ExceptionType 
ExceptionType , ExceptionType
ExceptionType:
ClassType
TypeVariable
MethodBody:
Block
;
InstanceInitializer:
Block
StaticInitializer:
"static"
|Block
;
ConstructorDeclaration:
ConstructorDeclarator [Throws] ConstructorBody
ConstructorModifier ConstructorDeclarator [Throws] ConstructorBody
ConstructorModifier:
Annotation |"public" |"protected" |"private"
ConstructorDeclarator:
[TypeParameters] SimpleTypeName "(" [ReceiverParameter ,] [FormalParameterList] ")"
SimpleTypeName:
TypeIdentifier
ConstructorBody:

|[ExplicitConstructorInvocation] [BlockStatements]
;
ExplicitConstructorInvocation:
[TypeArguments] "this" "(" [ArgumentList] ")" ;
[TypeArguments] "super" "(" [ArgumentList] ")" ;
ExpressionName . [TypeArguments] "super" "(" [ArgumentList] ")" ;
Primary . [TypeArguments] "super" "(" [ArgumentList] ")" ;
EnumDeclaration:
"enum" TypeIdentifier [ClassImplements] EnumBody
ClassModifier "enum" TypeIdentifier [ClassImplements] EnumBody
EnumBody:

|[EnumConstantList] [,] [EnumBodyDeclarations]
EnumConstantList:
EnumConstant
EnumConstant , EnumConstant
EnumConstant:
Identifier [( [ArgumentList] )] [ClassBody]
EnumConstantModifier Identifier [( [ArgumentList] )] [ClassBody]
EnumConstantModifier:
Annotation
EnumBodyDeclarations:
;
; ClassBodyDeclaration
RecordDeclaration:
record TypeIdentifier [TypeParameters] RecordHeader [ClassImplements] RecordBody
ClassModifier record TypeIdentifier [TypeParameters] RecordHeader [ClassImplements] RecordBody
RecordHeader:
"(" [RecordComponentList] ")"
RecordComponentList:
RecordComponent
RecordComponent , RecordComponent
RecordComponent:
UnannType Identifier
RecordComponentModifier UnannType Identifier
VariableArityRecordComponent
VariableArityRecordComponent:
UnannType ... Identifier
RecordComponentModifier UnannType ... Identifier
UnannType Annotation ... Identifier
RecordComponentModifier UnannType Annotation ... Identifier
RecordComponentModifier:
Annotation
RecordBody:

|"{"RecordBodyDeclaration"}"
RecordBodyDeclaration:
ClassBodyDeclaration
CompactConstructorDeclaration
CompactConstructorDeclaration:
SimpleTypeName ConstructorBody
ConstructorModifier SimpleTypeName ConstructorBody
InterfaceDeclaration:
NormalInterfaceDeclaration
AnnotationInterfaceDeclaration
NormalInterfaceDeclaration:
interface TypeIdentifier [TypeParameters] [InterfaceExtends] [InterfacePermits] InterfaceBody
InterfaceModifier interface TypeIdentifier [TypeParameters] [InterfaceExtends] [InterfacePermits] InterfaceBody
InterfaceModifier:
Annotation |"public" |"protected" |"private"|"abstract" |"static" |"sealed"|"non-sealed" |"strictfp"
InterfaceExtends:
extends InterfaceTypeList
InterfacePermits:
permits TypeName
permits TypeName , TypeName
InterfaceBody:

|"{"InterfaceMemberDeclaration"}"
InterfaceMemberDeclaration:
ConstantDeclaration
InterfaceMethodDeclaration
ClassDeclaration
InterfaceDeclaration
;
ConstantDeclaration:
UnannType VariableDeclaratorList ;
ConstantModifier UnannType VariableDeclaratorList ;
ConstantModifier:
Annotation|"public"|"static"|"final"
InterfaceMethodDeclaration:
MethodHeader MethodBody
InterfaceMethodModifier MethodHeader MethodBody
InterfaceMethodModifier:
Annotation|"public"|"private"|"abstract"|"default"|"static"|"strictfp"
AnnotationInterfaceDeclaration:
@ interface TypeIdentifier AnnotationInterfaceBody
InterfaceModifier @ interface TypeIdentifier AnnotationInterfaceBody
AnnotationInterfaceBody:

|"{"AnnotationInterfaceMemberDeclaration"}"
AnnotationInterfaceMemberDeclaration:
AnnotationInterfaceElementDeclaration
ConstantDeclaration
ClassDeclaration
InterfaceDeclaration
;
AnnotationInterfaceElementDeclaration:
UnannType Identifier ( ) [Dims] [DefaultValue] ;
AnnotationInterfaceElementModifier UnannType Identifier ( ) [Dims] [DefaultValue] ;
AnnotationInterfaceElementModifier:
Annotation|"public"|"abstract"
DefaultValue:
default ElementValue
Annotation:
NormalAnnotation
MarkerAnnotation
SingleElementAnnotation
NormalAnnotation:
@ TypeName "(" [ElementValuePairList] ")"
ElementValuePairList:
ElementValuePair
ElementValuePair , ElementValuePair
ElementValuePair:
Identifier = ElementValue
ElementValue:
ConditionalExpression
ElementValueArrayInitializer
Annotation
ElementValueArrayInitializer:

|[ElementValueList] [,]
ElementValueList:
ElementValue 
ElementValue , ElementValue
MarkerAnnotation:
@ TypeName
SingleElementAnnotation:
@ TypeName "(" ElementValue ")"
ArrayInitializer:

|[VariableInitializerList] [,]
VariableInitializerList:
VariableInitializer 
VariableInitializer , VariableInitializerList
Block:

|[BlockStatements]
BlockStatements:
BlockStatement 
|BlockStatement BlockStatements
BlockStatement:
LocalClassOrInterfaceDeclaration
LocalVariableDeclarationStatement
Statement
LocalClassOrInterfaceDeclaration:
ClassDeclaration
NormalInterfaceDeclaration
LocalVariableDeclarationStatement:
LocalVariableDeclaration ;
LocalVariableDeclaration:
LocalVariableType VariableDeclaratorList
VariableModifier LocalVariableType VariableDeclaratorList
LocalVariableType:
UnannType
var
Statement:
StatementWithoutTrailingSubstatement
LabeledStatement
IfThenStatement
IfThenElseStatement
WhileStatement
ForStatement
StatementNoShortIf:
StatementWithoutTrailingSubstatement
LabeledStatementNoShortIf
IfThenElseStatementNoShortIf
WhileStatementNoShortIf
ForStatementNoShortIf
StatementWithoutTrailingSubstatement:
Block
EmptyStatement
ExpressionStatement
AssertStatement
SwitchStatement
DoStatement
BreakStatement
ContinueStatement
ReturnStatement
SynchronizedStatement
ThrowStatement
TryStatement
YieldStatement
EmptyStatement:
;
LabeledStatement:
Identifier : Statement
LabeledStatementNoShortIf:
Identifier : StatementNoShortIf
ExpressionStatement:
StatementExpression ;
StatementExpression:
Assignment
PreIncrementExpression
PreDecrementExpression
PostIncrementExpression
PostDecrementExpression
MethodInvocation
ClassInstanceCreationExpression
IfThenStatement:
"if" "(" Expression ")" Statement
IfThenElseStatement:
"if" "(" Expression ")" StatementNoShortIf "else" Statement
IfThenElseStatementNoShortIf:
"if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf
AssertStatement:
assert Expression ;
assert Expression : Expression ;
SwitchStatement:
"switch" "(" Expression ")" SwitchBlock
SwitchBlock:
{ SwitchRule {SwitchRule} }
{ {SwitchBlockStatementGroup} {SwitchLabel :} }
SwitchRule:
SwitchLabel -> Expression ;
SwitchLabel -> Block
SwitchLabel -> ThrowStatement
SwitchBlockStatementGroup:
SwitchLabel : BlockStatements
SwitchLabel : SwitchLabel : BlockStatements
SwitchLabel:
case CaseConstant
case CaseConstant {, CaseConstant}
default
CaseConstant:
ConditionalExpression
WhileStatement:
"while" "(" Expression ")" Statement
WhileStatementNoShortIf:
"while" "(" Expression ")" StatementNoShortIf
DoStatement:
"do" Statement "while" "(" Expression ")" ;
ForStatement:
BasicForStatement
EnhancedForStatement
ForStatementNoShortIf:
BasicForStatementNoShortIf
EnhancedForStatementNoShortIf
BasicForStatement:
"for" "(" [ForInit] ; [Expression] ; [ForUpdate] ")" Statement
BasicForStatementNoShortIf:
"for" "(" [ForInit] ; [Expression] ; [ForUpdate] ")" StatementNoShortIf
ForInit:
StatementExpressionList
LocalVariableDeclaration
ForUpdate:
StatementExpressionList
StatementExpressionList:
StatementExpression
StatementExpression , StatementExpressionList
EnhancedForStatement:
"for" "(" LocalVariableDeclaration : Expression ")" Statement
EnhancedForStatementNoShortIf:
"for" "(" LocalVariableDeclaration : Expression ")" StatementNoShortIf
BreakStatement:
"break" [Identifier] ;
YieldStatement:
yield Expression ;
ContinueStatement:
"continue" [Identifier] ;
ReturnStatement:
"return" [Expression] ;
ThrowStatement:
throw Expression ;
SynchronizedStatement:
synchronized "(" Expression ")" Block
TryStatement:
try Block Catches
try Block [Catches] Finally
TryWithResourcesStatement
Catches:
CatchClause {CatchClause}
CatchClause:
catch "(" CatchFormalParameter ")" Block
CatchFormalParameter:
CatchType VariableDeclaratorId
VariableModifier CatchType VariableDeclaratorId
CatchType:
UnannClassType
UnannClassType "|" ClassType
Finally:
finally Block
TryWithResourcesStatement:
try ResourceSpecification Block [Catches] [Finally]
ResourceSpecification:
( ResourceList [;] )
ResourceList:
Resource 
Resource ; ResourceList
Resource:
LocalVariableDeclaration
VariableAccess
Pattern:
TypePattern
TypePattern:
LocalVariableDeclaration
Primary:
PrimaryNoNewArray
ArrayCreationExpression
PrimaryNoNewArray:
Literal
ClassLiteral
this
TypeName . this
( Expression )
ClassInstanceCreationExpression
FieldAccess
ArrayAccess
MethodInvocation
MethodReference
ClassLiteral:
TypeName {[ ]} . class
NumericType {[ ]} . class
boolean {[ ]} . class
void . class
ClassInstanceCreationExpression:
UnqualifiedClassInstanceCreationExpression
ExpressionName . UnqualifiedClassInstanceCreationExpression
Primary . UnqualifiedClassInstanceCreationExpression
UnqualifiedClassInstanceCreationExpression:
new [TypeArguments] ClassOrInterfaceTypeToInstantiate ( [ArgumentList] ) [ClassBody]
ClassOrInterfaceTypeToInstantiate:
{Annotation} Identifier {. {Annotation} Identifier} [TypeArgumentsOrDiamond]
TypeArgumentsOrDiamond:
TypeArguments
<>
FieldAccess:
Primary . Identifier
super . Identifier
TypeName . super . Identifier
ArrayAccess:
ExpressionName [ Expression ]
PrimaryNoNewArray [ Expression ]
MethodInvocation:
MethodName ( [ArgumentList] )
TypeName . [TypeArguments] Identifier ( [ArgumentList] )
ExpressionName . [TypeArguments] Identifier ( [ArgumentList] )
Primary . [TypeArguments] Identifier ( [ArgumentList] )
super . [TypeArguments] Identifier ( [ArgumentList] )
TypeName . super . [TypeArguments] Identifier ( [ArgumentList] )
ArgumentList:
Expression
|Expression ArgumentList
MethodReference:
ExpressionName :: [TypeArguments] Identifier
Primary :: [TypeArguments] Identifier
ReferenceType :: [TypeArguments] Identifier
super :: [TypeArguments] Identifier
TypeName . super :: [TypeArguments] Identifier
ClassType :: [TypeArguments] new
ArrayType :: new
ArrayCreationExpression:
new PrimitiveType DimExprs [Dims]
new ClassOrInterfaceType DimExprs [Dims]
new PrimitiveType Dims ArrayInitializer
new ClassOrInterfaceType Dims ArrayInitializer
DimExprs:
DimExpr
|DimExpr DimExprs
DimExpr:
[ Expression ]
|Annotation [ Expression ]
Expression:
LambdaExpression
AssignmentExpression
LambdaExpression:
LambdaParameters -> LambdaBody
LambdaParameters:
( [LambdaParameterList] )
Identifier
LambdaParameterList:
LambdaParameter
LambdaParameter , LambdaParameterList
Identifier {, Identifier}
LambdaParameter:
LambdaParameterType VariableDeclaratorId
VariableModifier LambdaParameterType VariableDeclaratorId
VariableArityParameter
LambdaParameterType:
UnannType
var
LambdaBody:
Expression
Block
AssignmentExpression:
ConditionalExpression
Assignment
Assignment:
LeftHandSide AssignmentOperator Expression
LeftHandSide:
ExpressionName
FieldAccess
ArrayAccess
AssignmentOperator:
=  *=  /=  %=  +=  -=  <<=  >>=  >>>=  &=  ^=  |=
ConditionalExpression:
ConditionalOrExpression
ConditionalOrExpression ? Expression : ConditionalExpression
ConditionalOrExpression ? Expression : LambdaExpression
ConditionalOrExpression:
ConditionalAndExpression
ConditionalOrExpression || ConditionalAndExpression
ConditionalAndExpression:
InclusiveOrExpression
ConditionalAndExpression && InclusiveOrExpression
InclusiveOrExpression:
ExclusiveOrExpression
InclusiveOrExpression | ExclusiveOrExpression
ExclusiveOrExpression:
AndExpression
ExclusiveOrExpression ^ AndExpression
AndExpression:
EqualityExpression
AndExpression & EqualityExpression
EqualityExpression:
RelationalExpression
EqualityExpression == RelationalExpression
EqualityExpression != RelationalExpression
RelationalExpression:
ShiftExpression
RelationalExpression < ShiftExpression
RelationalExpression > ShiftExpression
RelationalExpression <= ShiftExpression
RelationalExpression >= ShiftExpression
InstanceofExpression
InstanceofExpression:
RelationalExpression instanceof ReferenceType
RelationalExpression instanceof Pattern
ShiftExpression:
AdditiveExpression
ShiftExpression << AdditiveExpression
ShiftExpression >> AdditiveExpression
ShiftExpression >>> AdditiveExpression
AdditiveExpression:
MultiplicativeExpression
AdditiveExpression + MultiplicativeExpression
AdditiveExpression - MultiplicativeExpression
MultiplicativeExpression:
UnaryExpression
MultiplicativeExpression * UnaryExpression
MultiplicativeExpression / UnaryExpression
MultiplicativeExpression % UnaryExpression
UnaryExpression:
PreIncrementExpression
PreDecrementExpression
+ UnaryExpression
- UnaryExpression
UnaryExpressionNotPlusMinus
PreIncrementExpression:
++ UnaryExpression
PreDecrementExpression:
-- UnaryExpression
UnaryExpressionNotPlusMinus:
PostfixExpression
~ UnaryExpression
! UnaryExpression
CastExpression
SwitchExpression
PostfixExpression:
Primary
ExpressionName
PostIncrementExpression
PostDecrementExpression
PostIncrementExpression:
PostfixExpression ++
PostDecrementExpression:
PostfixExpression --
CastExpression:
( PrimitiveType ) UnaryExpression
( ReferenceType {AdditionalBound} ) UnaryExpressionNotPlusMinus
( ReferenceType {AdditionalBound} ) LambdaExpression
SwitchExpression:
switch ( Expression ) SwitchBlock
ConstantExpression:
Expression
%%

int main(){
    yyparse();
    return 0;
}